// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// clusterError
double clusterError(const arma::mat& design, const arma::mat& X, double alpha);
RcppExport SEXP _SFDesign_clusterError(SEXP designSEXP, SEXP XSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type design(designSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(clusterError(design, X, alpha));
    return rcpp_result_gen;
END_RCPP
}
// cluster_based_design_cpp
List cluster_based_design_cpp(const arma::mat& X, arma::mat D_ini, double alpha, int Lloyd_iter_max, double Lloyd_tol, int cen_iter_max, double cen_tol);
RcppExport SEXP _SFDesign_cluster_based_design_cpp(SEXP XSEXP, SEXP D_iniSEXP, SEXP alphaSEXP, SEXP Lloyd_iter_maxSEXP, SEXP Lloyd_tolSEXP, SEXP cen_iter_maxSEXP, SEXP cen_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type D_ini(D_iniSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< int >::type Lloyd_iter_max(Lloyd_iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type Lloyd_tol(Lloyd_tolSEXP);
    Rcpp::traits::input_parameter< int >::type cen_iter_max(cen_iter_maxSEXP);
    Rcpp::traits::input_parameter< double >::type cen_tol(cen_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cluster_based_design_cpp(X, D_ini, alpha, Lloyd_iter_max, Lloyd_tol, cen_iter_max, cen_tol));
    return rcpp_result_gen;
END_RCPP
}
// computeDistanceMatrixMaximin
arma::vec computeDistanceMatrixMaximin(const arma::mat& A);
RcppExport SEXP _SFDesign_computeDistanceMatrixMaximin(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(computeDistanceMatrixMaximin(A));
    return rcpp_result_gen;
END_RCPP
}
// computeDistanceMatrixMaxPro
arma::vec computeDistanceMatrixMaxPro(const arma::mat& A, int s);
RcppExport SEXP _SFDesign_computeDistanceMatrixMaxPro(SEXP ASEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(computeDistanceMatrixMaxPro(A, s));
    return rcpp_result_gen;
END_RCPP
}
// computeDistanceMatrixUniform
arma::vec computeDistanceMatrixUniform(const arma::mat& A);
RcppExport SEXP _SFDesign_computeDistanceMatrixUniform(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(computeDistanceMatrixUniform(A));
    return rcpp_result_gen;
END_RCPP
}
// maximinObj
double maximinObj(const arma::mat& A, int power);
RcppExport SEXP _SFDesign_maximinObj(SEXP ASEXP, SEXP powerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type power(powerSEXP);
    rcpp_result_gen = Rcpp::wrap(maximinObj(A, power));
    return rcpp_result_gen;
END_RCPP
}
// maximinCrit
double maximinCrit(const arma::mat& A);
RcppExport SEXP _SFDesign_maximinCrit(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(maximinCrit(A));
    return rcpp_result_gen;
END_RCPP
}
// maximinLHDOptimizer_cpp
List maximinLHDOptimizer_cpp(arma::mat design, int power, int num_passes, int max_iter, double temp, double decay, int no_update_iter_max, std::string method);
RcppExport SEXP _SFDesign_maximinLHDOptimizer_cpp(SEXP designSEXP, SEXP powerSEXP, SEXP num_passesSEXP, SEXP max_iterSEXP, SEXP tempSEXP, SEXP decaySEXP, SEXP no_update_iter_maxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type design(designSEXP);
    Rcpp::traits::input_parameter< int >::type power(powerSEXP);
    Rcpp::traits::input_parameter< int >::type num_passes(num_passesSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< double >::type decay(decaySEXP);
    Rcpp::traits::input_parameter< int >::type no_update_iter_max(no_update_iter_maxSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(maximinLHDOptimizer_cpp(design, power, num_passes, max_iter, temp, decay, no_update_iter_max, method));
    return rcpp_result_gen;
END_RCPP
}
// maxproObj
double maxproObj(const arma::mat& A, int s, double delta);
RcppExport SEXP _SFDesign_maxproObj(SEXP ASEXP, SEXP sSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(maxproObj(A, s, delta));
    return rcpp_result_gen;
END_RCPP
}
// maxproCrit
double maxproCrit(const arma::mat& A, int s, double delta);
RcppExport SEXP _SFDesign_maxproCrit(SEXP ASEXP, SEXP sSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(maxproCrit(A, s, delta));
    return rcpp_result_gen;
END_RCPP
}
// maxproLHDOptimizer_cpp
List maxproLHDOptimizer_cpp(arma::mat design, double s, int num_passes, int max_iter, double temp, double decay, int no_update_iter_max, std::string method);
RcppExport SEXP _SFDesign_maxproLHDOptimizer_cpp(SEXP designSEXP, SEXP sSEXP, SEXP num_passesSEXP, SEXP max_iterSEXP, SEXP tempSEXP, SEXP decaySEXP, SEXP no_update_iter_maxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type design(designSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< int >::type num_passes(num_passesSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< double >::type decay(decaySEXP);
    Rcpp::traits::input_parameter< int >::type no_update_iter_max(no_update_iter_maxSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(maxproLHDOptimizer_cpp(design, s, num_passes, max_iter, temp, decay, no_update_iter_max, method));
    return rcpp_result_gen;
END_RCPP
}
// uniformObj
double uniformObj(const arma::mat& A);
RcppExport SEXP _SFDesign_uniformObj(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(uniformObj(A));
    return rcpp_result_gen;
END_RCPP
}
// uniformCrit
double uniformCrit(const arma::mat& A, int s);
RcppExport SEXP _SFDesign_uniformCrit(SEXP ASEXP, SEXP sSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< int >::type s(sSEXP);
    rcpp_result_gen = Rcpp::wrap(uniformCrit(A, s));
    return rcpp_result_gen;
END_RCPP
}
// uniformLHDOptimizer_cpp
List uniformLHDOptimizer_cpp(arma::mat design, int num_passes, int max_iter, double temp, double decay, int no_update_iter_max, std::string method);
RcppExport SEXP _SFDesign_uniformLHDOptimizer_cpp(SEXP designSEXP, SEXP num_passesSEXP, SEXP max_iterSEXP, SEXP tempSEXP, SEXP decaySEXP, SEXP no_update_iter_maxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type design(designSEXP);
    Rcpp::traits::input_parameter< int >::type num_passes(num_passesSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< double >::type decay(decaySEXP);
    Rcpp::traits::input_parameter< int >::type no_update_iter_max(no_update_iter_maxSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(uniformLHDOptimizer_cpp(design, num_passes, max_iter, temp, decay, no_update_iter_max, method));
    return rcpp_result_gen;
END_RCPP
}
// customLHDOptimizer_cpp
List customLHDOptimizer_cpp(Rcpp::Function r_computeDistanceMatrix, Rcpp::Function r_computeCriterion, Rcpp::Function r_updateDistanceMatrix, arma::mat design, int num_passes, int max_iter, double temp, double decay, int no_update_iter_max, std::string method);
RcppExport SEXP _SFDesign_customLHDOptimizer_cpp(SEXP r_computeDistanceMatrixSEXP, SEXP r_computeCriterionSEXP, SEXP r_updateDistanceMatrixSEXP, SEXP designSEXP, SEXP num_passesSEXP, SEXP max_iterSEXP, SEXP tempSEXP, SEXP decaySEXP, SEXP no_update_iter_maxSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Function >::type r_computeDistanceMatrix(r_computeDistanceMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type r_computeCriterion(r_computeCriterionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Function >::type r_updateDistanceMatrix(r_updateDistanceMatrixSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type design(designSEXP);
    Rcpp::traits::input_parameter< int >::type num_passes(num_passesSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type temp(tempSEXP);
    Rcpp::traits::input_parameter< double >::type decay(decaySEXP);
    Rcpp::traits::input_parameter< int >::type no_update_iter_max(no_update_iter_maxSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(customLHDOptimizer_cpp(r_computeDistanceMatrix, r_computeCriterion, r_updateDistanceMatrix, design, num_passes, max_iter, temp, decay, no_update_iter_max, method));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SFDesign_clusterError", (DL_FUNC) &_SFDesign_clusterError, 3},
    {"_SFDesign_cluster_based_design_cpp", (DL_FUNC) &_SFDesign_cluster_based_design_cpp, 7},
    {"_SFDesign_computeDistanceMatrixMaximin", (DL_FUNC) &_SFDesign_computeDistanceMatrixMaximin, 1},
    {"_SFDesign_computeDistanceMatrixMaxPro", (DL_FUNC) &_SFDesign_computeDistanceMatrixMaxPro, 2},
    {"_SFDesign_computeDistanceMatrixUniform", (DL_FUNC) &_SFDesign_computeDistanceMatrixUniform, 1},
    {"_SFDesign_maximinObj", (DL_FUNC) &_SFDesign_maximinObj, 2},
    {"_SFDesign_maximinCrit", (DL_FUNC) &_SFDesign_maximinCrit, 1},
    {"_SFDesign_maximinLHDOptimizer_cpp", (DL_FUNC) &_SFDesign_maximinLHDOptimizer_cpp, 8},
    {"_SFDesign_maxproObj", (DL_FUNC) &_SFDesign_maxproObj, 3},
    {"_SFDesign_maxproCrit", (DL_FUNC) &_SFDesign_maxproCrit, 3},
    {"_SFDesign_maxproLHDOptimizer_cpp", (DL_FUNC) &_SFDesign_maxproLHDOptimizer_cpp, 8},
    {"_SFDesign_uniformObj", (DL_FUNC) &_SFDesign_uniformObj, 1},
    {"_SFDesign_uniformCrit", (DL_FUNC) &_SFDesign_uniformCrit, 2},
    {"_SFDesign_uniformLHDOptimizer_cpp", (DL_FUNC) &_SFDesign_uniformLHDOptimizer_cpp, 7},
    {"_SFDesign_customLHDOptimizer_cpp", (DL_FUNC) &_SFDesign_customLHDOptimizer_cpp, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_SFDesign(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
